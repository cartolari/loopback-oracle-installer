#!/bin/bash

lib_dir=$(dirname "${BASH_SOURCE[0]}")

export ASTEROID_ORACLE_BASE_PACKAGE="asteroid-oracle"
export ASTEROID_ORACLE_INSTALL_PACKAGE="asteroid-oracle-installer"
export ASTEROID_ORACLE_INSTALL_VERSION=$(cat $lib_dir/VERSION)

#  For testing purposes, this is commented out.
#  Needs to be set to the download location.
# export ASTEROID_DOWNLOAD_URI="http://www.strongloop.com/downloads/$ASTEROID_ORACLE_INSTALL_PACKAGE"

nmdir="$lib_dir/../../node_modules"
[ ! -d "$nmdir" ] && nmdir="$lib_dir/../node_modules"
[ -d "$nmdir" ]  || mkdir -p "$nmdir"
INSTALL_DIR=$(cd -P -- "$nmdir" && pwd -P)

STRONGLOOP_INSTALL_PLATFORM="Unknown"
STRONGLOOP_INSTALL_OS="Unknown"
STRONGLOOP_INSTALL_ARCH="Unknown"



#
#  Print error message and exit with the specified code.
#
#  Examples:
#    die 'This sucks!' 101
#
function die() {
  [ -n "$1" ] && echo "$1"
  exit ${2:-"-1"}

}  #  End of function  die.


#
#  Prints the specified message - formatted.
#
#  Examples:
#    print_message "Initializing ..."
#
function print_message() {
  # echo "$@" | sed "s/^/\t/"
  if [ -n "$@" ]; then
    echo "  $@"
  else
    echo ""
  fi

  return 0

}  #  End of function  print_message.

#
#  Determine linux distro.
#
#  Examples:
#    determine_linux_distro
#
function determine_linux_distro() {
  #  Check if we have uname.
  $(which uname > /dev/null 2>&1) || return 1

  export STRONGLOOP_INSTALL_OS=$(uname -s)
  if [[ "$STRONGLOOP_INSTALL_OS" =~ Linux.* ]]; then
    export STRONGLOOP_INSTALL_ARCH=$(uname -m)
    export STRONGLOOP_INSTALL_PLATFORM="Linux"
    return 0
  fi

  return 1

}  #  End of function  determine_linux_distro.


#
#  Determine if Mac OSX
#
#  Examples:
#    check_macosx
#
function check_macosx() {
  #  Check if we have uname.
  $(which uname > /dev/null 2>&1) || return 1

  export STRONGLOOP_INSTALL_OS=$(uname -s)
  if [ "$STRONGLOOP_INSTALL_OS" = "Darwin" ]; then
    export STRONGLOOP_INSTALL_ARCH=$(uname -m)
    export STRONGLOOP_INSTALL_PLATFORM="MacOSX"
    return 0
  fi

  return 1

}  #  End of function  determine_linux_distro.


#
#
#  Sets the download uri path if not already set.
#
#  Examples:
#    set_download_uri_base
#
function set_download_uri_base() {
  if [ -z "$ASTEROID_DOWNLOAD_URI" ]; then
     reldir="$lib_dir/../../asteroid-oracle-builder/build/$STRONGLOOP_INSTALL_PLATFORM" 
     builder_path=$(cd -P -- "$reldir" && pwd -P)
     export ASTEROID_DOWNLOAD_URI="file://$builder_path"
  fi

}  #  End of function  set_download_uri_base.


#
#  Print env variables for package, version, platform, os and architecture.
#
#  Examples:
#    print_env_variables
#
function print_env_variables() {
   print_message "- Env variables for ${ASTEROID_ORACLE_INSTALL_PACKAGE}:"
   print_message "    Platform = $STRONGLOOP_INSTALL_PLATFORM"
   print_message "          OS = $STRONGLOOP_INSTALL_OS"
   print_message "        Arch = $STRONGLOOP_INSTALL_ARCH"
   print_message "        Base = $ASTEROID_ORACLE_BASE_PACKAGE"
   print_message "     Package = $ASTEROID_ORACLE_INSTALL_PACKAGE"
   print_message "     Version = $ASTEROID_ORACLE_INSTALL_VERSION"
   print_message "    Download = $ASTEROID_DOWNLOAD_URI"

}  #  End of function  print_env_variables.


#
#
#  Detects the platform we are running the install on.
#
#  Examples:
#    detect_platform
#
function detect_platform() {
  determine_linux_distro || check_macosx || die "Unsupported platform";
  set_download_uri_base
  print_env_variables
  return 0

}  #  End of function  detect_platform.


#
#
#  Extract package files.
#
#  Examples:
#    extract_package_files
#
function extract_package_files() {
  platform=$STRONGLOOP_INSTALL_PLATFORM
  arch=$STRONGLOOP_INSTALL_ARCH
  package=$ASTEROID_ORACLE_BASE_PACKAGE
  version=$ASTEROID_ORACLE_INSTALL_VERSION
  dluri=$ASTEROID_DOWNLOAD_URI

  print_message "- StrongLoop Node Oracle $platform $arch installer"

  #  Downloadable gzipped tarball.
  targz="${package}_${platform}_${version}_${arch}.tar.gz"

  #  Install to node modules directory if one exists.
  nmdir="../node_modules"
  [ -d "$nmdir" ] ||  nmdir="`pwd`/node_modules"

  mkdir -p "$nmdir"

  pushd "$nmdir" > /dev/null
  rm -f "$targz"
  print_message "- Downloading $targz ..."
  if ! curl -o ./$targz  $dluri/$targz > /dev/null 2>&1; then
      print_message "- Failed to download $dluri/$targz"
      popd > /dev/null
      return 1
  fi

  print_message "- Extracting $ASTEROID_DOWNLOAD_URI/$targz ..."
  if ! tar -zxf $targz > /dev/null 2>&1; then
    print_message "- Failed to extract $targz"
    popd > /dev/null
    return 1
  fi

  export OCI_DIR="$(pwd)/instantclient/"
  print_message "- Oracle InstantClient dir = $OCI_DIR"
  rm -f "$targz"
  popd > /dev/null

  return 0

}  #  End of function  extract_package_files.


function setup_configuration() {
  ocidir=${1:-"$OCI_DIR"}

  profile="$HOME/.bash_profile"
  [ "`id -u`" = "0" ] && profile="/etc/bashrc"

  touch "$profile"
  if ! grep "$ocidir" "$profile" > /dev/null 2>&1; then
    varname="LD_LIBRARY_PATH"
    oldvalue="\$LD_LIBRARY_PATH"
    if [ "$STRONGLOOP_INSTALL_PLATFORM" = "MacOSX" ]; then
      varname="DYLD_LIBRARY_PATH"
      oldvalue="\$DYLD_LIBRARY_PATH"
    fi

    cat >> "$profile" << MYEOF
#  `date`: Added by asteroid-oracle-installer.
export $varname="$oldvalue:$ocidir"
MYEOF
  fi

  return 0

}  #  End of function  setup_configuration.


